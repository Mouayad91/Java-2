#BlueJ class context
comment0.target=Aufgabe1
comment0.text=\r\n\ Eine\ Klasse,\ die\ verschiedene\ Mathematische\ Funktionen\ implementiert.\r\n\ \r\n\ @author\ Monzr\ Hajy\ Omar\ und\ Mouayad\ Haji\ Omar\ \r\n\ \r\n\ @version\ 1.0\r\n
comment1.params=wahl
comment1.target=java.util.function.IntPredicate\ condition(int)
comment1.text=\r\n\ Methode\ gibt\ ein\ Lambda-Ausdruck\ zur\u00FCck.\ Hier\ wird\ abh\u00E4ngig\ von\ der\ Eingabe\ ein\ Lambda-Ausdruck,\ das\ nur\ gerade\ oder\ ungerade\ Zahlen\ erlaubt\ zur\u00FCck.\r\n\r\n@param\ wahl\ die\ Eingabe\r\n@return\ odd\ Lambda-Ausdruck\ erlaubt\ nur\ ungerade\ Zahlen\r\n@return\ even\ Lambda-Ausdruck\ erlaubt\ nur\ gerade\ Zahlen\r\n
comment10.params=b\ msg
comment10.target=void\ check(boolean,\ java.lang.String)
comment10.text=\r\nMethode\ testet\ die\ eingegebene\ Werte\ f\u00FCr\ bestimmte\ Bedingung.\r\n\r\n@param\ b\r\n@param\ msg\ Error-Nachricht\ als\ Ausgabe\r\n
comment11.params=
comment11.target=java.lang.String\ getErrorMsg()
comment11.text=\r\n\ Mit\ der\ Methode\ bekommt\ man\ das\ String-Error-Nachricht\ zur\u00FCck.\r\n\ \r\n\ @return\ FALSCHR_WERT\r\n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\r\nMain-Methode\ der\ Klasse,\ hier\ wird\ das\ Programm\ getestet,\ wobei\ man\ die\ odd\ oder\ even\ Zahlen\ in\ bestimmte\ Lamdba-Ausdr\u00FCcke\ verwendet\ und\ dann\ mit\ der\ applyAndPrint-Methode\ das\ Ergebnis\ ausgeben.\r\n\ \r\n\ @param\ args\r\n
comment2.params=number
comment2.target=boolean\ test(int)
comment3.params=wahl\ x\ y
comment3.target=void\ lambdas(int,\ int,\ int)
comment3.text=\r\nIn\ dieser\ Methode\ werden\ mehrere\ Lambda-Ausdr\u00FCcke\ erstellt.\ Hier\ wird\ abh\u00E4ngig\ von\ der\ Eingabe\ und\ zwei\ nat\u00FCrliche\ Zahlen\ ein\ Lambda-Ausdruck\ erstellt,\ dann\ die\ Methode-applyAndPrint\ mit\ einem\ lambda-Ausdruck\ und\ zwei\ natuerliche\ Zahlen\ als\ argumente\ aufruft\ und\ eine\ bestimme\ Mathematische\ Funktion\ bearbeitet.\r\n\r\n@param\ wahl\ die\ Eingabe\ um\ das\ lambda-Ausdruck\ auszuwaehlen\r\n@param\ x\ die\ erste\ natuerliche\ Zahl\r\n@param\ y\ die\ zweite\ natuerliche\ Zahl\r\n
comment4.params=wahl
comment4.target=MyFunction\ anonymeKlassen(int)
comment4.text=\r\nMethode\ gibt\ ein\ Lambda-Ausdruck\ zur\u00FCck,\ das\ als\ Anonyme-Klasse\ implementiert\ wird.\ Hier\ wird\ abh\u00E4ngig\ von\ der\ Eingabe\ eine\ bestimmte\ Lambda-Ausdruck\ zur\u00FCckgegeben.\r\n\r\n@param\ wahl\ die\ Eingabe\ um\ das\ angeforderte\ Lambda-Ausdruck\ zur\u00FCckzugeben.\r\n@return\ quadrat2\ Lambda-Ausdruck\ berechnet\ die\ quadratische\ Werte\ der\ Zahlen.\r\n@return\ fakultaet2\ Lambda-Ausdruck\ berechnet\ die\ Fakultaet\ Werte\ der\ Zahlen.\r\nreturn\ exponentialFunktion2\ Lambda-Ausdruck\ berechnet\ eine\ exponential\ Funktion.\r\nreturn\ fibonacci2\ Lambda-Ausdruck\ berechnet\ die\ fibonacci\ Werte\ der\ Zahlen.\r\n
comment5.params=i
comment5.target=int\ apply(int)
comment6.params=i
comment6.target=int\ apply(int)
comment7.params=i
comment7.target=int\ apply(int)
comment8.params=i
comment8.target=int\ apply(int)
comment9.params=i\ j\ funktion
comment9.target=void\ applyAndPrint(int,\ int,\ MyFunction)
comment9.text=\r\nEine\ Methode,\ die\ zwei\ nat\u00FCrliche\ Zahlen\ i\ und\ j\ sowie\ ein\ Lambda-Ausdruck\ nimmt.\ Die\ Methode\ wendet\ sich\ an\ die\ Zahlen\ zwischen\ i\ und\ j\ und\ berechnet\ f\u00FCr\ diese\ die\ eingegebene\ Mathematische\ Funktion\ im\ Lambda-Ausdruck,\ und\ gibt\ das\ Ergebnis\ aus.\r\n\r\n@param\ i\ die\ erste\ natuerliche\ Zahl\r\n@param\ j\ die\ zweite\ natuerliche\ Zahl\r\n@param\ funktion\ als\ Lambda-Ausdruck\r\n
numComments=13
