#BlueJ class context
comment0.target=DoppeltVerketteteListe
comment0.text=\r\n\ Eine\ Klasse,\ die\ mehrere\ Methoden\ des\ Interfaces\ List<E>\ implementiert.\r\n\ \r\n\ @author\ Monzr\ Hajy\ Omar\ und\ Mouayad\ Haji\ Omar\ \r\n\ \r\n\ @version\ 1.0\r\n
comment1.params=
comment1.target=DoppeltVerketteteListe()
comment1.text=\r\n\ Konstruktor\ zum\ Erstellen\ der\ List<E>\ Object\ mit\ default\ Values.\r\n\ \r\n
comment10.params=
comment10.target=java.lang.Object[]\ toArray()
comment11.params=a
comment11.target=java.lang.Object[]\ toArray(java.lang.Object[])
comment11.text=\r\n\ Methode\ umwandelt\ die\ Liste\ mit\ deren\ Inhalt\ auf\ ein\ Array\ und\ gibt\ das\ Array\ zur\u00FCck.\r\n\ @param\ a\ das\ Array\ als\ eingabe\r\n\ @return\ a\ das\ Array\ nach\ dem\ ausf\u00FCllen\ mit\ dem\ Inhalt\ der\ Liste\r\n
comment12.params=e
comment12.target=boolean\ add(java.lang.Object)
comment12.text=\r\n\ Methode\ f\u00FCgt\ einen\ Object\ in\ die\ Liste\ ein.\r\n\ @param\ e\ das\ Objekt\ als\ Paramenter\ f\u00FCr\ die\ Einf\u00FCgung\r\n\ @return\ true\ oder\ false\ wenn\ es\ eingef\u00FCgt\ wird\ oder\ nicht\r\n
comment13.params=o
comment13.target=boolean\ remove(java.lang.Object)
comment13.text=\r\n\ Methode\ l\u00F6scht\ einen\ Object\ von\ der\ Liste.\r\n\ @param\ o\ das\ Objekt\ als\ Paramenter\ f\u00FCr\ die\ L\u00F6schung\r\n\ @return\ true\ oder\ false\ wenn\ es\ gel\u00F6scht\ wird\ oder\ nicht\r\n
comment14.params=c
comment14.target=boolean\ containsAll(java.util.Collection)
comment15.params=c
comment15.target=boolean\ addAll(java.util.Collection)
comment15.text=\r\n\ Methode\ f\u00FCgt\ meherere\ Werte\ in\ die\ Liste\ ein.\r\n\ @param\ c\ ein\ Collection\ deren\ Inhalt\ jeweils\ eingef\u00FCgt\ wird\r\n\ @return\ true\ oder\ false\ wenn\ alle\ Werte\ eingef\u00FCgt\ werden\ oder\ nicht\r\n
comment16.params=index\ c
comment16.target=boolean\ addAll(int,\ java.util.Collection)
comment17.params=c
comment17.target=boolean\ removeAll(java.util.Collection)
comment18.params=c
comment18.target=boolean\ retainAll(java.util.Collection)
comment19.params=
comment19.target=void\ clear()
comment19.text=\r\n\ Methode\ l\u00F6scht\ alle\ werte\ bzw.\ Objecte\ in\ der\ Liste.\r\n
comment2.params=head
comment2.target=DoppeltVerketteteListe(Node)
comment2.text=\r\n\ Konstruktor\ zum\ Erstellen\ der\ List<E>\ Object\ mit\ head\ Node\ als\ eingabe\ und\ das\ tail\ Node\ wird\ mit\ null\ intialisiert.\r\n\ @param\ head\ zum\ eingeben\ des\ heades\ node\ der\ Liste\r\n
comment20.params=index
comment20.target=java.lang.Object\ get(int)
comment20.text=\r\n\ Methode\ gibt\ ein\ Object\ zur\u00FCck\ mit\ hilfe\ der\ Index-Stelle\ als\ eingabe\ f\u00FCr\ die\ Methode.\r\n\ @param\ index\ die\ Stelle\ des\ Objectes\r\n\ @return\ current\ das\ gesuchte\ Object\r\n
comment21.params=index\ element
comment21.target=java.lang.Object\ set(int,\ java.lang.Object)
comment21.text=\r\n\ Methode\ ersetzt\ den\ Inhalt\ eines\ Objectes\ in\ der\ Liste.\ Das\ Object\ wird\ mit\ Hilfe\ des\ indexes\ gesucht.\r\n\ @param\ index\ die\ Stelle\ des\ Objectes\r\n\ @param\ element\ das\ neue\ Object\ zum\ ersetzen\r\n\ @return\ current\ das\ gesuchte\ Object\r\n
comment22.params=index\ element
comment22.target=void\ add(int,\ java.lang.Object)
comment22.text=\r\n\ Methode\ f\u00FCgt\ ein\ Object\ auf\ einem\ bestimmten\ Index-Stelle\ in\ die\ Liste\ ein.\r\n\ @param\ index\ die\ Stelle\ zum\ Einf\u00FCgen\r\n\ @param\ element\ das\ neue\ Object\ zum\ Einf\u00FCgen\r\n
comment23.params=index
comment23.target=java.lang.Object\ remove(int)
comment23.text=\r\n\ Methode\ l\u00F6scht\ ein\ Object\ auf\ einem\ bestimmten\ Index-Stelle\ von\ der\ Liste.\r\n\ @param\ index\ die\ Stelle\ des\ Objectes\ zum\ L\u00F6schen\r\n\ @return\ current\ das\ gesuchte\ und\ gel\u00F6schte\ Objekt\r\n
comment24.params=o
comment24.target=int\ indexOf(java.lang.Object)
comment24.text=\r\n\ Methode\ gibt\ die\ Index-Stelle\ eines\ Objektes\ zur\u00FCck.\r\n\ @param\ o\ zum\ suchen\ des\ Objektes\r\n\ @return\ counter\ die\ Index-Stelle\ des\ Objektes\r\n
comment25.params=o
comment25.target=int\ lastIndexOf(java.lang.Object)
comment26.params=
comment26.target=java.util.ListIterator\ listIterator()
comment27.params=index
comment27.target=java.util.ListIterator\ listIterator(int)
comment27.text=\r\n\ Methode\ gibt\ ein\ listIterator<E>-Object\ zur\u00FCck.\r\n\ @return\ new\ Iterarot<E>\ ein\ ListIterator\r\n
comment28.params=
comment28.target=boolean\ hasNext()
comment29.params=
comment29.target=java.lang.Object\ next()
comment3.params=head\ tail
comment3.target=DoppeltVerketteteListe(Node,\ Node)
comment3.text=\r\n\ Konstruktor\ zum\ Erstellen\ der\ List<E>\ Object\ mit\ head\ und\ tail\ Nodes\ als\ eingabe.\r\n\ @param\ head\ zum\ eingeben\ des\ heades\ node\ der\ Liste\r\n\ @param\ tail\ zum\ eingeben\ des\ tailes\ node\ der\ Liste\r\n
comment30.params=
comment30.target=boolean\ hasPrevious()
comment31.params=
comment31.target=java.lang.Object\ previous()
comment32.params=
comment32.target=int\ nextIndex()
comment33.params=
comment33.target=int\ previousIndex()
comment34.params=
comment34.target=void\ remove()
comment35.params=e
comment35.target=void\ set(java.lang.Object)
comment36.params=e
comment36.target=void\ add(java.lang.Object)
comment37.params=fromIndex\ toIndex
comment37.target=java.util.List\ subList(int,\ int)
comment38.params=
comment38.target=java.lang.String\ toString()
comment38.text=\r\n\ Methode\ gibt\ alle\ Informationen\ der\ Nodes\ als\ Zeichenkette\ zur\u00FCck.\r\n\ \r\n\ @return\ s\ als\ Zeichenkette\ der\ Nodes\ mit\ deren\ Data-Inhalt\r\n
comment4.params=
comment4.target=int\ size()
comment4.text=\r\n\ Methode\ gibt\ die\ Gr\u00F6\u00DFe\ der\ Liste\ zur\u00FCck.\r\n\ @return\ anzahl\ die\ Gr\u00F6\u00DFe\ der\ Liste\r\n
comment5.params=
comment5.target=boolean\ isEmpty()
comment5.text=\r\n\ Methode\ \u00FCberpr\u00FCft,\ ob\ die\ Liste\ leer\ ist\ oder\ nicht.\r\n\ @return\ true\ oder\ flase\ falls\ die\ Liste\ leer\ ist\ oder\ nicht\r\n
comment6.params=o
comment6.target=boolean\ contains(java.lang.Object)
comment6.text=\r\n\ Methode\ \u00FCberpr\u00FCft,\ ob\ ein\ Object\ in\ der\ Liste\ enthalten\ ist\ oder\ nicht.\r\n\ @return\ true\ oder\ flase\ falls\ das\ Object\ in\ der\ Liste\ existiert\ oder\ nicht\r\n
comment7.params=
comment7.target=java.util.Iterator\ iterator()
comment7.text=\r\n\ Methode\ gibt\ ein\ Iterator-Object\ zur\u00FCck.\ Wobei\ das\ Iterator\ f\u00FCr\ mehrere\ ander\ Methoden\ notwendig\ ist.\r\n\ @return\ new\ Iterarot<E>\ ein\ Iterator\r\n
comment8.params=
comment8.target=boolean\ hasNext()
comment9.params=
comment9.target=java.lang.Object\ next()
numComments=39
